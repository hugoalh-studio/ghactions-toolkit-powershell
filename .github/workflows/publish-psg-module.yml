# $<Schema>$ https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions
name: "Publish - PowerShell Gallery - Module"
on:
  release:
    types:
      - "published"
  workflow_dispatch:
jobs:
  publish-psg-module:
    name: "Publish - PowerShell Gallery - Module"
    runs-on: "windows-latest"
    steps:
      - name: "Checkout Repository"
        uses: "actions/checkout@v3.0.2"
      - name: "Modify PowerShell Repository"
        id: "modify-powershell-repository"
        run: |
          Write-Host -Object "::set-output name=installation-policy::$((Get-PSRepository -Name 'PSGallery').InstallationPolicy)"
          Set-PSRepository -Name 'PSGallery' -InstallationPolicy 'Trusted' -Verbose
        shell: "pwsh"
      - name: "Setup PowerShellGet"
        run: |
          if (Get-InstalledModule -Name 'PowerShellGet' -MinimumVersion '2.2.5' -ErrorAction SilentlyContinue) {} else {
            Install-Module -Name 'PowerShellGet' -MinimumVersion '2.2.5' -Scope 'AllUsers' -AcceptLicense -Verbose
          }
        shell: "pwsh"
      - name: "Update PowerShell Modules"
        run: |
          Update-Module -Scope 'AllUsers' -AcceptLicense -Verbose
        shell: "pwsh"
      - name: "Test Publish"
        run: |
          Publish-Module -Path '.\hugoalh.GitHubActionsToolkit\' -NugetAPIKey 'GUID' -WhatIf -Verbose
        shell: "pwsh"
      - name: "Publish"
        run: |
          Publish-Module -Path '.\hugoalh.GitHubActionsToolkit\' -NugetAPIKey '${{secrets.POWERSHELLGALLERY_TOKEN}}' -Verbose
        shell: "pwsh"
      - name: "Revert Modify PowerShell Repository"
        if: "${{steps.modify-powershell-repository.outcome == 'success' && always()}}"
        run: |
          Set-PSRepository -Name 'PSGallery' -InstallationPolicy '${{steps.modify-powershell-repository.outputs.installation-policy}}'
        shell: "pwsh"
